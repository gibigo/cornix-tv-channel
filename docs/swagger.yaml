basePath: /api/v1
definitions:
  types.AddChannel:
    properties:
      telegramId:
        type: integer
    required:
    - telegramId
    type: object
  types.AddStrategy:
    properties:
      allowCounter:
        type: boolean
      leverage:
        type: integer
      symbol:
        type: string
      targetStrategy:
        $ref: '#/definitions/types.TargetStrategy'
      zoneStrategy:
        $ref: '#/definitions/types.ZoneStrategy'
    required:
    - symbol
    type: object
  types.AddUser:
    properties:
      name:
        type: string
      password:
        type: string
    required:
    - name
    - password
    type: object
  types.Channel:
    properties:
      id:
        type: integer
      telegramId:
        type: integer
    type: object
  types.Entry:
    properties:
      diff:
        type: number
    type: object
  types.GetUser:
    properties:
      identifier:
        type: string
      name:
        type: string
    type: object
  types.SL:
    properties:
      diff:
        type: number
    type: object
  types.Strategy:
    properties:
      allowCounter:
        type: boolean
      leverage:
        type: integer
      symbol:
        type: string
      targetStrategy:
        $ref: '#/definitions/types.TargetStrategy'
      zoneStrategy:
        $ref: '#/definitions/types.ZoneStrategy'
    type: object
  types.TP:
    properties:
      diff:
        type: number
    type: object
  types.TargetStrategy:
    properties:
      entries:
        items:
          $ref: '#/definitions/types.Entry'
        type: array
      isBreakout:
        type: boolean
      sl:
        $ref: '#/definitions/types.SL'
      tps:
        items:
          $ref: '#/definitions/types.TP'
        type: array
    type: object
  types.UpdateChannel:
    properties:
      telegramId:
        type: integer
    required:
    - telegramId
    type: object
  types.ZoneStrategy:
    properties:
      entryStart:
        type: number
      entryStop:
        type: number
      isBreakout:
        type: boolean
      sl:
        $ref: '#/definitions/types.SL'
      tps:
        items:
          $ref: '#/definitions/types.TP'
        type: array
    type: object
  utils.HTTPError:
    properties:
      code:
        example: 400
        type: integer
      message:
        example: error
        type: string
    type: object
host: https://yourforwarder.io
info:
  contact: {}
  license:
    name: GPLv3
    url: https://github.com/gibigo/cornix-tv-channel/blob/master/LICENSE
  title: Cornix-TV-Channel API
  version: "1.0"
paths:
  /channels:
    get:
      consumes:
      - application/json
      description: Get all channels of the current user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/types.Channel'
            type: array
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HTTPError'
      security:
      - BasicAuth: []
      summary: Get all channels
      tags:
      - channels
    post:
      consumes:
      - application/json
      description: Create a new channel
      parameters:
      - description: Channel to create
        in: body
        name: channel
        required: true
        schema:
          $ref: '#/definitions/types.AddChannel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.Channel'
        "401":
          description: Unauthorized
          schema:
            type: string
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/utils.HTTPError'
      security:
      - BasicAuth: []
      summary: Create a channel
      tags:
      - channels
  /channels/{channel_id}:
    delete:
      consumes:
      - application/json
      description: Delete a channel and all related strategies
      parameters:
      - description: Channel ID
        in: path
        name: channel_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HTTPError'
      security:
      - BasicAuth: []
      summary: Delete a channel
      tags:
      - channels
    get:
      consumes:
      - application/json
      description: Get a spectific channel
      parameters:
      - description: Channel ID
        in: path
        name: channel_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.Channel'
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HTTPError'
      security:
      - BasicAuth: []
      summary: Get a spectific channel
      tags:
      - channels
    put:
      consumes:
      - application/json
      description: Change the telegram id of a channel and keep all related strategies
      parameters:
      - description: Channel ID
        in: path
        name: channel_id
        required: true
        type: integer
      - description: Channel to create
        in: body
        name: channel
        required: true
        schema:
          $ref: '#/definitions/types.UpdateChannel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.Channel'
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HTTPError'
      security:
      - BasicAuth: []
      summary: Update a channel
      tags:
      - channels
  /channels/{channel_id}/strategies:
    get:
      consumes:
      - application/json
      description: Get all strategies for a particular channel
      parameters:
      - description: Channel ID
        in: path
        name: channel_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/types.Strategy'
            type: array
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HTTPError'
      security:
      - BasicAuth: []
      summary: Get all strategies
      tags:
      - strategies
    post:
      consumes:
      - application/json
      description: Create a new strategy for the current user
      parameters:
      - description: Strategy to create
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/types.AddStrategy'
      - description: Channel ID
        in: path
        name: channel_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.Strategy'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "401":
          description: Unauthorized
          schema:
            type: string
      security:
      - BasicAuth: []
      summary: Create a new strategy
      tags:
      - strategies
  /channels/{channel_id}/strategies/{strategy_symbol}:
    delete:
      consumes:
      - application/json
      description: Delete a strategy for a particular symbol
      parameters:
      - description: Channel ID
        in: path
        name: channel_id
        required: true
        type: integer
      - description: Strategy Symbol, use 'all' for the default strategy
        in: path
        name: strategy_symbol
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HTTPError'
      security:
      - BasicAuth: []
      summary: Delete a strategy
      tags:
      - strategies
    get:
      consumes:
      - application/json
      description: Get a strategy by the channel id and the symbol
      parameters:
      - description: Channel ID
        in: path
        name: channel_id
        required: true
        type: integer
      - description: Strategy Symbol, use 'all' for the default strategy
        in: path
        name: strategy_symbol
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.Strategy'
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HTTPError'
      security:
      - BasicAuth: []
      summary: Get a strategy
      tags:
      - strategies
  /users:
    delete:
      consumes:
      - application/json
      description: Delete the current user
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "401":
          description: Unauthorized
          schema:
            type: string
      security:
      - BasicAuth: []
      summary: Delete the current user
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Get the current user, can be used to verify the user exists
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.GetUser'
        "401":
          description: Unauthorized
          schema:
            type: string
      security:
      - BasicAuth: []
      summary: Get the current user
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create a new user
      parameters:
      - description: User to create
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/types.AddUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.GetUser'
        "401":
          description: Unauthorized
          schema:
            type: string
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "501":
          description: if user registration is disabled on the server
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Create a user
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Change the current users setting. The request body must contain
        either a new name or a new password. If both, the username and the password
        get changed.
      parameters:
      - description: Userupdate
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/types.AddUser'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "401":
          description: Unauthorized
          schema:
            type: string
      security:
      - BasicAuth: []
      summary: Change the current users setting
      tags:
      - users
securityDefinitions:
  BasicAuth:
    type: basic
swagger: "2.0"
